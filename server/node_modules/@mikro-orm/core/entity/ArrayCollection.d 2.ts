/// <reference types="node" />
import { inspect } from 'util';
import type { EntityDTO, EntityProperty, IPrimaryKey, Primary } from '../typings';
import { Reference } from './Reference';
export declare class ArrayCollection<T extends object, O extends object> {
    readonly owner: O;
    protected readonly items: Set<T>;
    protected initialized: boolean;
    protected dirty: boolean;
    protected _count?: number;
    private _property?;
    constructor(owner: O, items?: T[]);
    loadCount(): Promise<number>;
    getItems(): T[];
    toArray(): EntityDTO<T>[];
    toJSON(): EntityDTO<T>[];
    getIdentifiers<U extends IPrimaryKey = Primary<T> & IPrimaryKey>(field?: string): U[];
    add(...items: (T | Reference<T>)[]): void;
    set(items: (T | Reference<T>)[]): void;
    /**
     * @internal
     */
    hydrate(items: T[]): void;
    /**
     * Remove specified item(s) from the collection. Note that removing item from collection does necessarily imply deleting the target entity,
     * it means we are disconnecting the relation - removing items from collection, not removing entities from database - `Collection.remove()`
     * is not the same as `em.remove()`. If we want to delete the entity by removing it from collection, we need to enable `orphanRemoval: true`,
     * which tells the ORM we don't want orphaned entities to exist, so we know those should be removed.
     */
    remove(...items: (T | Reference<T>)[]): void;
    /**
     * Remove all items from the collection. Note that removing items from collection does necessarily imply deleting the target entity,
     * it means we are disconnecting the relation - removing items from collection, not removing entities from database - `Collection.remove()`
     * is not the same as `em.remove()`. If we want to delete the entity by removing it from collection, we need to enable `orphanRemoval: true`,
     * which tells the ORM we don't want orphaned entities to exist, so we know those should be removed.
     */
    removeAll(): void;
    /**
     * @internal
     */
    removeWithoutPropagation(entity: T): void;
    contains(item: T | Reference<T>, check?: boolean): boolean;
    count(): number;
    isInitialized(fully?: boolean): boolean;
    isDirty(): boolean;
    setDirty(dirty?: boolean): void;
    get length(): number;
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * @internal
     */
    get property(): EntityProperty<T>;
    protected propagate(item: T, method: 'add' | 'remove' | 'takeSnapshot'): void;
    protected propagateToInverseSide(item: T, method: 'add' | 'remove' | 'takeSnapshot'): void;
    protected propagateToOwningSide(item: T, method: 'add' | 'remove' | 'takeSnapshot'): void;
    protected shouldPropagateToCollection(collection: ArrayCollection<O, T>, method: 'add' | 'remove' | 'takeSnapshot'): boolean;
    protected incrementCount(value: number): void;
    [inspect.custom](depth: number): string;
}
export interface ArrayCollection<T, O> {
    [k: number]: T;
}
